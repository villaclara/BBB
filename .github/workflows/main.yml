name: Build, Test and Release

on:
  push:
    branches:
      - master  # Trigger on push to the master branch

jobs:

  release:
    runs-on: ubuntu-latest  # Run the release on a separate runner
    if: github.ref == 'refs/heads/master'  # Only trigger on the master branch push

    steps:
    # Step 1: Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Get the latest tag from git and increment it
    - name: Get current version tag and increment
      id: tag_version
      run: |
        # Get the latest tag, or set a default if no tags exist
        latest_tag=$(git tag --sort=-v:refname | head -n 1)
        if [[ -z "$latest_tag" ]]; then
          new_tag="v1.0.0"  # If no tags exist, start with v1.0.0
        else
          # Increment the patch version
          new_tag=$(echo $latest_tag | awk -F. -v OFS=. '{$NF++;print}')
        fi
        echo "new_tag=$new_tag" >> $GITHUB_ENV

    # Step 3: Configure git to use GitHub token for authentication
    - name: Configure git
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

     # Step 4: Delete the existing remote tag (if it exists) before creating a new one
    - name: Delete existing remote tag (if exists)
      run: |
        git tag -d ${{ env.new_tag }} || echo "Tag does not exist locally"
        git push --delete origin ${{ env.new_tag }} || echo "Tag does not exist remotely"

        
    # Step 5: Create the new tag
    - name: Create new Git tag
      run: |
        git tag ${{ env.new_tag }}

    # Step 6: Push the tag to the repository using GITHUB_TOKEN for authentication
    - name: Push new tag
      run: |
        git push https://github.com/${{ github.repository }} ${{ env.new_tag }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Step 7: Create a GitHub release
    - name: Create GitHub release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ env.new_tag }}
        release_name: Release ${{ env.new_tag }}
        body: |
          New release for version ${{ env.new_tag }}.
